import React, { useState, useEffect, useCallback } from 'react';
// Assuming the CSS is correctly imported via a module
import styles from '../assets/css/FAQ.module.css'; 
import FAQData from "../data/FAQ.json";
// Removed: import customer_query from '../data/customer_query.json'; // Cannot be written to from the browser

// Import icons from a popular library (React Icons)
import { HiOutlineSearch, HiOutlineX, HiOutlinePaperAirplane } from 'react-icons/hi';
import { FaChevronDown } from 'react-icons/fa';

// Define the common search keywords and their color classes
const commonKeywords = [
Â  Â  { text: "Project Management", colorClass: styles.keywordColor1 },
Â  Â  { text: "Design", colorClass: styles.keywordColor2 },
Â  Â  { text: "Software Development", colorClass: styles.keywordColor3 },
Â  Â  { text: "DevOps", colorClass: styles.keywordColor4 },
Â  Â  { text: "Cloud", colorClass: styles.keywordColor5 },
Â  Â  { text: "Security", colorClass: styles.keywordColor6 },
Â  Â  { text: "Support", colorClass: styles.keywordColor7 },
Â  Â  { text: "Pricing", colorClass: styles.keywordColor8 },
];

// This key acts as the file name for your simulated database in the browser.
const CUSTOMER_QUERY_KEY = 'customer_queries_simulated_db';


const FAQ = () => {
Â  Â  const [searchQuery, setSearchQuery] = useState('');
Â  Â  const [selectedFaq, setSelectedFaq] = useState(null);
Â  Â  const [modalVisible, setModalVisible] = useState(false);
Â  Â  
Â  Â  // States for the custom query submission feature
Â  Â  const [isSubmitting, setIsSubmitting] = useState(false);
Â  Â  const [customQuery, setCustomQuery] = useState('');
Â  Â  const [userEmail, setUserEmail] = useState(''); 
Â  Â  const [submitMessage, setSubmitMessage] = useState('');

Â  Â  useEffect(() => {
Â  Â  Â  Â  // Controls body overflow when modal is active
Â  Â  Â  Â  document.body.style.overflow = modalVisible ? 'hidden' : 'unset';
Â  Â  }, [modalVisible]);

Â  Â  const handleSearchChange = (event) => {
Â  Â  Â  Â  setSearchQuery(event.target.value);
Â  Â  };

Â  Â  const handleKeywordClick = (keywordText) => {
Â  Â  Â  Â  setSearchQuery(keywordText);
Â  Â  };

Â  Â  const openModal = (faq) => {
Â  Â  Â  Â  setSelectedFaq(faq);
Â  Â  Â  Â  setModalVisible(true);
Â  Â  };

Â  Â  const closeModal = () => {
Â  Â  Â  Â  setModalVisible(false);
Â  Â  Â  Â  setTimeout(() => setSelectedFaq(null), 500); 
Â  Â  };

    /**
     * The core function to "save" the user query and email to Local Storage.
     * This mimics writing to the 'customer_query.json' file.
     */
Â  Â  const handleSubmitQuery = useCallback(() => {
Â  Â  Â  Â  if (customQuery.trim() === '' || userEmail.trim() === '') {
Â  Â  Â  Â  Â  Â  setSubmitMessage('Please enter both your question and a valid email.');
Â  Â  Â  Â  Â  Â  setTimeout(() => setSubmitMessage(''), 5000);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  // --- ðŸ’¾ LOCAL STORAGE (SIMULATED SAVE) ðŸ’¾ ---
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  // 1. Retrieve the existing array of queries
Â  Â  Â  Â  Â  Â  const existingQueriesJSON = localStorage.getItem(CUSTOMER_QUERY_KEY);
Â  Â  Â  Â  Â  Â  let existingQueries = [];
Â  Â  Â  Â  Â  Â  if (existingQueriesJSON) {
Â  Â  Â  Â  Â  Â  Â  Â  existingQueries = JSON.parse(existingQueriesJSON);
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  // 2. Create the new query object with the required data fields
Â  Â  Â  Â  Â  Â  const newQuery = {
Â  Â  Â  Â  Â  Â  Â  Â  id: Date.now(), // Unique ID for tracking
Â  Â  Â  Â  Â  Â  Â  Â  query: customQuery.trim(),
Â  Â  Â  Â  Â  Â  Â  Â  email: userEmail.trim(), // The email is saved perfectly
Â  Â  Â  Â  Â  Â  Â  Â  timestamp: new Date().toISOString()
Â  Â  Â  Â  Â  Â  };

Â  Â  Â  Â  Â  Â  // 3. Add the new object and save the entire array back to Local Storage
Â  Â  Â  Â  Â  Â  existingQueries.push(newQuery);
Â  Â  Â  Â  Â  Â  localStorage.setItem(CUSTOMER_QUERY_KEY, JSON.stringify(existingQueries));

Â  Â  Â  Â  Â  Â  console.log("--- Customer Query Saved ---");
Â  Â  Â  Â  Â  Â  console.log("Saved Object:", newQuery);
            console.log("To view all saved data, check your browser's Application -> Local Storage for the key 'customer_queries_simulated_db'");
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  setSubmitMessage('Thank you! Your question and email are saved in the browserâ€™s storage (simulated JSON file). ðŸš€');

Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Error saving to Local Storage:", error);
Â  Â  Â  Â  Â  Â  setSubmitMessage('Submission failed! Could not access local browser storage.');
Â  Â  Â  Â  }
Â  Â  Â  Â  // ------------------------------------

Â  Â  Â  Â  // Reset form and cleanup
Â  Â  Â  Â  setCustomQuery(''); 
Â  Â  Â  Â  setUserEmail('');
Â  Â  Â  Â  setIsSubmitting(false); 
Â  Â  Â  Â  
Â  Â  Â  Â  // Clear the success/error message after a few seconds
Â  Â  Â  Â  setTimeout(() => setSubmitMessage(''), 8000);
Â  Â  }, [customQuery, userEmail]);

Â  Â  // Handle Enter key for submission 
Â  Â  const handleKeyDown = (event) => {
Â  Â  Â  Â  if (event.key === 'Enter') {
Â  Â  Â  Â  Â  Â  handleSubmitQuery();
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const filteredFaqs = FAQData.reduce((acc, category) => {
Â  Â  Â  Â  const query = searchQuery.toLowerCase();
Â  Â  Â  Â  const matchingFaqs = category.faqs.filter(faq =>
Â  Â  Â  Â  Â  Â  faq.question.toLowerCase().includes(query) ||
Â  Â  Â  Â  Â  Â  faq.answer.toLowerCase().includes(query)
Â  Â  Â  Â  );

Â  Â  Â  Â  if (matchingFaqs.length > 0) {
Â  Â  Â  Â  Â  Â  acc.push({
Â  Â  Â  Â  Â  Â  Â  Â  ...category,
Â  Â  Â  Â  Â  Â  Â  Â  faqs: matchingFaqs
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  Â  Â  return acc;
Â  Â  }, []);

Â  Â  const renderFaqCategories = () => {
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <div className={styles.faqListContainer}>
Â  Â  Â  Â  Â  Â  Â  Â  {filteredFaqs.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  filteredFaqs.map((category, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={index} className={styles.categoryContainer}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className={styles.categoryTitle}>{category.category}</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.faqList}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {category.faqs.map((faq, faqIndex) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={faqIndex}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={styles.faqItem}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => openModal(faq)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.faqQuestion}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className={styles.questionText}>{faq.question}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaChevronDown className={styles.chevronIcon} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.noResults}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>No questions found. Please try a different search term.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  };

Â  Â  const renderModal = () => {
Â  Â  Â  Â  if (!selectedFaq) return null;

Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <div className={`${styles.modalOverlay} ${modalVisible ? styles.modalActive : ''}`} onClick={closeModal}>
Â  Â  Â  Â  Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`${styles.modalContent} ${modalVisible ? styles.modalActive : ''}`} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={e => e.stopPropagation()} 
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.modalHeader}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className={styles.modalQuestion}>{selectedFaq.question}</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={closeModal} className={styles.closeButton} aria-label="Close">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <HiOutlineX className={styles.closeIcon} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.modalBody}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className={styles.modalAnswer}>{selectedFaq.answer}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  };

Â  Â  const renderSubmissionArea = () => {
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <div className={styles.submissionContainer}>
Â  Â  Â  Â  Â  Â  Â  Â  <p className={styles.submissionPrompt}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Do you have another question? 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={styles.submitLink} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setIsSubmitting(true);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setSubmitMessage(''); 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  aria-label="Submit a new question"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Don't worry. Submit Here.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  Â  Â  {submitMessage && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className={styles.submitMessage}>{submitMessage}</p>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  {isSubmitting && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.submissionForm}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.customQueryInputGroup}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Type your question here..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={styles.customQueryInput}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={customQuery}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setCustomQuery(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleSubmitQuery} className={styles.submitButton} aria-label="Send Query">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <HiOutlinePaperAirplane className={styles.sendIcon} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="email"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Your email address (for reply)..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={styles.emailInput} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={userEmail}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setUserEmail(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onKeyDown={handleKeyDown}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <div className={styles.faqSection}>
Â  Â  Â  Â  Â  Â  <div className={styles.faqContent}>
Â  Â  Â  Â  Â  Â  Â  Â  <h1 className={styles.mainTitle}>Frequently Asked Questions</h1>
Â  Â  Â  Â  Â  Â  Â  Â  <p className={styles.subtitle}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Find answers to the most common questions about our software development services and process.
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* Search keywords section */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.keywordContainer}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className={styles.keywordTitle}>Common Search Terms:</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.keywordList}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {commonKeywords.map((keyword, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={index} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`${styles.keyword} ${keyword.colorClass}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleKeywordClick(keyword.text)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {keyword.text}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className={styles.searchContainer}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <HiOutlineSearch className={styles.searchIcon} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Search for a question..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={styles.searchInput}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={searchQuery}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleSearchChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* Submission Area */}
Â  Â  Â  Â  Â  Â  Â  Â  {renderSubmissionArea()}
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {renderFaqCategories()}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  {renderModal()}
Â  Â  Â  Â  </div>
Â  Â  );
};

export default FAQ;



